// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: queries.sql

package sqlc

import (
	"context"
)

const createTweet = `-- name: CreateTweet :one
INSERT INTO "tweets"(content, "user")
VALUES ($1, $2) RETURNING id, content, "user"
`

type CreateTweetParams struct {
	Content string
	User    int32
}

func (q *Queries) CreateTweet(ctx context.Context, arg CreateTweetParams) (Tweet, error) {
	row := q.db.QueryRowContext(ctx, createTweet, arg.Content, arg.User)
	var i Tweet
	err := row.Scan(&i.ID, &i.Content, &i.User)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "users"(first_name, last_name)
VALUES ($1, $2) RETURNING id, first_name, last_name
`

type CreateUserParams struct {
	FirstName string
	LastName  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.FirstName, arg.LastName)
	var i User
	err := row.Scan(&i.ID, &i.FirstName, &i.LastName)
	return i, err
}

const deleteTweet = `-- name: DeleteTweet :exec
DELETE FROM "tweets"
WHERE id = $1 AND user = $2
`

type DeleteTweetParams struct {
	ID      int32
	Column2 interface{}
}

func (q *Queries) DeleteTweet(ctx context.Context, arg DeleteTweetParams) error {
	_, err := q.db.ExecContext(ctx, deleteTweet, arg.ID, arg.Column2)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "users"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getTweet = `-- name: GetTweet :one
SELECT id, content, "user" FROM "tweets"
WHERE id = $1
`

func (q *Queries) GetTweet(ctx context.Context, id int32) (Tweet, error) {
	row := q.db.QueryRowContext(ctx, getTweet, id)
	var i Tweet
	err := row.Scan(&i.ID, &i.Content, &i.User)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name FROM "users"
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.FirstName, &i.LastName)
	return i, err
}

const listTweet = `-- name: ListTweet :many
SELECT id, content, "user" FROM "tweets"
`

func (q *Queries) ListTweet(ctx context.Context) ([]Tweet, error) {
	rows, err := q.db.QueryContext(ctx, listTweet)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tweet
	for rows.Next() {
		var i Tweet
		if err := rows.Scan(&i.ID, &i.Content, &i.User); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUser = `-- name: ListUser :many
SELECT id, first_name, last_name FROM "users"
`

func (q *Queries) ListUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTweet = `-- name: UpdateTweet :exec
UPDATE "tweets"
SET 
  content = $1,
  "user" = $2
WHERE id = $3
`

type UpdateTweetParams struct {
	Content string
	User    int32
	ID      int32
}

func (q *Queries) UpdateTweet(ctx context.Context, arg UpdateTweetParams) error {
	_, err := q.db.ExecContext(ctx, updateTweet, arg.Content, arg.User, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "users"
SET 
  first_name = $1,
  last_name = $2
WHERE id = $3
`

type UpdateUserParams struct {
	FirstName string
	LastName  string
	ID        int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.FirstName, arg.LastName, arg.ID)
	return err
}
