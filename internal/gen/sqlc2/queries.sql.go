// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: queries.sql

package sqlcTweet

import (
	"context"
)

const createTweet = `-- name: CreateTweet :one
INSERT INTO "tweets"(content, userid)
VALUES ($1, $2) RETURNING id, content, userid
`

type CreateTweetParams struct {
	Content string
	Userid  int64
}

func (q *Queries) CreateTweet(ctx context.Context, arg CreateTweetParams) (Tweet, error) {
	row := q.db.QueryRowContext(ctx, createTweet, arg.Content, arg.Userid)
	var i Tweet
	err := row.Scan(&i.ID, &i.Content, &i.Userid)
	return i, err
}

const deleteTweet = `-- name: DeleteTweet :exec
DELETE FROM "tweets"
WHERE id = $1
`

func (q *Queries) DeleteTweet(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTweet, id)
	return err
}

const getTweet = `-- name: GetTweet :one
SELECT id, content, userid FROM "tweets"
WHERE id = $1
`

func (q *Queries) GetTweet(ctx context.Context, id int32) (Tweet, error) {
	row := q.db.QueryRowContext(ctx, getTweet, id)
	var i Tweet
	err := row.Scan(&i.ID, &i.Content, &i.Userid)
	return i, err
}

const listTweet = `-- name: ListTweet :many
SELECT id, content FROM "tweets" WHERE userid = $1
`

type ListTweetRow struct {
	ID      int32
	Content string
}

func (q *Queries) ListTweet(ctx context.Context, userid int64) ([]ListTweetRow, error) {
	rows, err := q.db.QueryContext(ctx, listTweet, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTweetRow
	for rows.Next() {
		var i ListTweetRow
		if err := rows.Scan(&i.ID, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTweet = `-- name: UpdateTweet :exec
UPDATE "tweets"
SET 
  content = $1
WHERE id = $2
`

type UpdateTweetParams struct {
	Content string
	ID      int32
}

func (q *Queries) UpdateTweet(ctx context.Context, arg UpdateTweetParams) error {
	_, err := q.db.ExecContext(ctx, updateTweet, arg.Content, arg.ID)
	return err
}
